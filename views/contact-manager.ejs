<!DOCTYPE html>
<html lang="zh-Hant-TW">
    <head>
        <meta charset="utf-8">
        <title>WCB Cafe - Contact Manager</title>
        <meta name="description" content="Contact Management System">
        <link rel="icon" type="image/png" href="/images/favicon.png">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <!-- CSS -->
        <link rel="stylesheet" href="https://unpkg.com/ress/dist/ress.min.css">
        <link href="https://fonts.googleapis.com/css?family=Philosopher" rel="stylesheet">
        <link href="/css/style.css" rel="stylesheet">
        <link href="/css/admin.css" rel="stylesheet">
        <script src="/js/admin/auth.js"></script>
        <style>
            .wrapper {
                max-width: 1100px;
                margin: 0 auto;
                padding: 0 4%;
            }

            .page-title {
                font-size: 5rem;
                font-family: "Philosopher", serif;
                text-transform: uppercase;
                font-weight: normal;
                text-align: center;
                color: #fff;
                text-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            }

            .big-bg {
                background-size: cover;
                background-position: center top;
                background-repeat: no-repeat;
                min-height: 100vh;
                background-image: url(/images/contact-bg.jpg);
            }

            #contact {
                padding-top: 2rem;
            }

            .contact-table {
                width: 100%;
                border-collapse: collapse;
                background-color: rgba(255, 255, 255, 0.95);
                margin-top: 2rem;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            }

            .contact-table th,
            .contact-table td {
                border: 1px solid #ddd;
                padding: 12px;
                text-align: left;
            }

            .contact-table th {
                background-color: #433323;
                color: white;
            }

            .contact-table tr:hover {
                background-color: #f5f5f5;
            }

            .button {
                background-color: #0bd;
                color: white;
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s;
            }

            .button:hover {
                background-color: #0a9;
            }

            @media (max-width: 768px) {
                .page-title {
                    font-size: 2.5rem;
                }
            }
        </style>
    </head>
    <body>
        <audio id="notificationSound" src="/music/msg-notif-sound.mp3" preload="auto"></audio>
        <div id="contact" class="big-bg">
            <header class="page-header wrapper">
                <h1><a href="/admin/"><img class="logo" src="/images/logo.svg" alt="WCB Cafe Admin"></a></h1>
                <nav>
                    <ul class="main-nav">
                        <li><a href="/admin/">Dashboard</a></li>
                        <li><a href="/admin/menuManager.html">Menu Manager</a></li>
                        <li><a href="/contact/done">Done Items</a></li>
                        <li><a href="/">Logout</a></li>
                    </ul>
                </nav>
            </header>

            <div class="wrapper">
                <h2 class="page-title" style="color: #433323;">客戶信息</h2>
                <table class="contact-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Message</th>
                            <th>Date</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% contact.forEach(function(item) { %>
                            <tr>
                                <td><%= item.name %></td>
                                <td><%= item.email %></td>
                                <td><%= item.message %></td>
                                <td><%= item.date.toLocaleString('zh-TW', { 
                                    year: 'numeric', 
                                    month: '2-digit', 
                                    day: '2-digit',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                }) %></td>
                                <td>
                                    <form action="/contact/check" method="post">
                                        <input type="hidden" id="contactId_<%= item._id %>" name="contactId" value="<%= item._id %>">
                                        <input type="hidden" id="progress_<%= item._id %>" name="progress" value="Done">
                                        <input type="submit" class="button" value="完成">
                                    </form>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
        <script>
            let lastMessageCount = <%= contacts.length %>;
            let isPlaying = false;
            let isUnloading = false;
            const notificationSound = document.getElementById('notificationSound');
            let checkInterval = null;

            console.log('Initial message count:', lastMessageCount);

            // Test sound on page load
            notificationSound.addEventListener('canplaythrough', () => {
                console.log('Sound file loaded successfully');
            });

            notificationSound.addEventListener('error', (e) => {
                console.error('Error loading sound file:', e);
            });

            // Function to play sound
            function playNotificationSound() {
                if (!isPlaying && !isUnloading) {
                    console.log('Attempting to play sound...');
                    isPlaying = true;
                    
                    // Use promise but don't await it
                    notificationSound.play()
                        .then(() => {
                            if (!isUnloading) {
                                console.log('Sound playing successfully');
                            }
                        })
                        .catch(error => {
                            console.error('Error playing sound:', error);
                            isPlaying = false;
                            // Try to enable sound after user interaction
                            if (!isUnloading) {
                                document.body.addEventListener('click', () => {
                                    notificationSound.play()
                                        .then(() => console.log('Sound played after user interaction'))
                                        .catch(e => console.error('Still failed to play sound after user interaction:', e));
                                }, { once: true });
                            }
                        });
                }
            }

            // Function to stop sound
            function stopNotificationSound() {
                if (isPlaying) {
                    console.log('Stopping sound');
                    isPlaying = false;
                    try {
                        notificationSound.pause();
                        notificationSound.currentTime = 0;
                    } catch (e) {
                        console.error('Error stopping sound:', e);
                    }
                }
            }

            // Function to check for new messages
            function checkNewMessages() {
                if (isUnloading) return;

                console.log('Checking for new messages...');
                fetch('/contact/check-new', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    },
                    credentials: 'same-origin'
                })
                .then(response => {
                    if (!response.ok) throw new Error('Failed to check messages');
                    return response.json();
                })
                .then(data => {
                    if (isUnloading) return;
                    
                    const currentCount = data.count;
                    console.log('Message check - Current count:', currentCount, 'Last count:', lastMessageCount);

                    if (currentCount > lastMessageCount) {
                        console.log('New messages detected! Playing sound...');
                        playNotificationSound();
                        if (!isUnloading) {
                            setTimeout(() => {
                                if (!isUnloading) {
                                    console.log('Refreshing page...');
                                    window.location.reload();
                                }
                            }, 2000);
                        }
                    } else {
                        console.log('No new messages');
                        stopNotificationSound();
                    }
                    lastMessageCount = currentCount;
                })
                .catch(error => {
                    if (!isUnloading) {
                        console.error('Error checking messages:', error);
                        stopNotificationSound();
                    }
                });
            }

            // Start checking for messages
            function startMessageChecking() {
                if (!checkInterval && !isUnloading) {
                    checkNewMessages(); // Initial check
                    checkInterval = setInterval(checkNewMessages, 10000);
                }
            }

            // Stop checking for messages
            function stopMessageChecking() {
                if (checkInterval) {
                    clearInterval(checkInterval);
                    checkInterval = null;
                }
            }

            // Start the message checking when page loads
            startMessageChecking();

            // Handle page visibility change
            document.addEventListener('visibilitychange', () => {
                if (document.hidden) {
                    console.log('Page hidden - stopping sound and checks');
                    stopNotificationSound();
                    stopMessageChecking();
                } else {
                    console.log('Page visible - resuming checks');
                    startMessageChecking();
                }
            });

            // Clean up before page unload
            window.addEventListener('beforeunload', () => {
                console.log('Page unloading - cleaning up...');
                isUnloading = true;
                stopMessageChecking();
                stopNotificationSound();
            });

            // Test sound button (for debugging)
            const testButton = document.createElement('button');
            testButton.textContent = 'Test Sound';
            testButton.style.position = 'fixed';
            testButton.style.bottom = '20px';
            testButton.style.right = '20px';
            testButton.style.zIndex = '1000';
            testButton.onclick = playNotificationSound;
            document.body.appendChild(testButton);
        </script>
    </body>
</html>
